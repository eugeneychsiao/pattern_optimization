NAME
    pattern

CLASSES
    builtins.object
        Condition
        Pattern

    class Condition(builtins.object)
     |  Condition(main, sub: list, strict_history=False, match_value=False, immediate_follow=False)
     |
     |  The Condition class holds typing, values of certain attributes, sub Conditions, other options that can then be matched to ast node to see
     |  if all conditions are met.
     |
     |  Methods defined here:
     |
     |  __init__(self, main, sub: list, strict_history=False, match_value=False, immediate_follow=False)
     |      :param main_condition: A tuple that contains the type of class we want to match and the attribute returned if the node matches the type, and optionally the variable to match an attribute if match_value is selected
     |      :param sub_conditions: list of sub conditions that can verify other attributes of the same node
     |      :param strict_history: flag that sets how strictly we map the sequence of conditions past this condition. If true, any progress
     |      made matching other conditions will be forgotten, else progress will be carried if all subsequent conditions aren't met
     |      within this node
     |      :param match_value: flag that states if we're matching the typing of a node or a value of an attribute of the node
     |      :param immediate_follow: flag that determines if this condition must immediately follow the previous one in the
     |      sequence, otherwise the condition isn't met, even if all requirements are met later
     |
     |  check_condition(self, node)
     |      Check whether a given node matches the main conditions and the subconditions
     |      :param node: Node to be checked
     |      :return: The attribute specified in main condition that will become the next node to be traveled, else if the
     |      input node if the attribute was marked as EndOfChain or this condition matches the value of an attribute, meaning
     |       we no longer want to traverse through node,
     |      else None, meaning some condition in this class wasn't met
     |
     |  rgetattr(self, obj, attr, *args)
     |      Helper function to get nested attributes of a given object, modeled after base getattr
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class Pattern(builtins.object)
     |  The Pattern class looks to find positions in an ast tree of a certain pattern that is specified by a sequence of
     |  conditions
     |
     |  Methods defined here:
     |
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  find_occurrences(self, astTree, seq: collections.deque)
     |      Find all occurrences of a pattern specified by a sequence of conditions given in an astTree
     |      :param astTree: List of ast nodes from the body of a function_def ast node
     |      :param seq: Queue of Condition objects
     |      :return: Indices of the starting position of all found patterns relative to the list of ast nodes given
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

FILE
    s22-pyopt-4kinds\patternreplace\pattern.py

-------------------------------------------------------------------
NAME
    parser

CLASSES
    ast.NodeTransformer(ast.NodeVisitor)
        AttributePatternAnalyzer
    ast.NodeVisitor(builtins.object)
        AttributeAnalyzer
        JoinAnalyzer
        ListCompAnalyzer

    class AttributeAnalyzer(ast.NodeVisitor)
     |  AttributeAnalyzer(patterns)
     |
     |  Method resolution order:
     |      AttributeAnalyzer
     |      ast.NodeVisitor
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, patterns)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  visit_FunctionDef(self, node: ast.FunctionDef)
     |      Using NodeVisitor, visit every function definition within ast tree, search for patterns of code to be replaced, and
     |      if found, replace that section of code with local variable reference instead of class attribute reference, along with
     |      lines to create that local variable and reassign it to the class attribute after the local variable is done being used.
     |      :param node: FunctionDef node
     |      :return:
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeVisitor:
     |
     |  generic_visit(self, node)
     |      Called if no explicit visitor function exists for a node.
     |
     |  visit(self, node)
     |      Visit a node.
     |
     |  visit_Constant(self, node)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ast.NodeVisitor:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class AttributePatternAnalyzer(ast.NodeTransformer)
     |  AttributePatternAnalyzer(refs)
     |
     |  Hepler class for AttributeAnalyzer, performs replacement within loop section for class attribute calls with a local variable
     |
     |  Method resolution order:
     |      AttributePatternAnalyzer
     |      ast.NodeTransformer
     |      ast.NodeVisitor
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, refs)
     |      :param refs: Dictionary to keep tract of new local variable created to add extra assignment statements to create the local variable
     |
     |  visit_Attribute(self, node: ast.Attribute)
     |      Visit every instance of attribute node, replace attributes called from self (ex self.x) with local version (local_x)
     |      :param node:
     |      :return:
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeTransformer:
     |
     |  generic_visit(self, node)
     |      Called if no explicit visitor function exists for a node.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeVisitor:
     |
     |  visit(self, node)
     |      Visit a node.
     |
     |  visit_Constant(self, node)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ast.NodeVisitor:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class JoinAnalyzer(ast.NodeVisitor)
     |  JoinAnalyzer(patterns)
     |
     |  Method resolution order:
     |      JoinAnalyzer
     |      ast.NodeVisitor
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, patterns)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  visit_FunctionDef(self, node)
     |      Using NodeVisitor, visit every function definition within ast tree, search for patterns of code to be replaced, and
     |      if found, replace that section of code with a String join().
     |      :param node: FunctionDef node
     |      :return:
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeVisitor:
     |
     |  generic_visit(self, node)
     |      Called if no explicit visitor function exists for a node.
     |
     |  visit(self, node)
     |      Visit a node.
     |
     |  visit_Constant(self, node)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ast.NodeVisitor:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

    class ListCompAnalyzer(ast.NodeVisitor)
     |  ListCompAnalyzer(patterns)
     |
     |  Class for traversing through an ast tree searching to replace code sections list comprehensions wherever possible
     |
     |  Method resolution order:
     |      ListCompAnalyzer
     |      ast.NodeVisitor
     |      builtins.object
     |
     |  Methods defined here:
     |
     |  __init__(self, patterns)
     |      :param patterns: list of conditions sequences that represent patterns of code that should be replaced
     |
     |  if_to_ifexp(self, node)
     |      Recursive function for creating if_exp from a if, elif, else block of code.
     |      each statement within the body of each if statement must be a append call
     |
     |  loop_if_to_assign(self, for_loop, if_block, tests)
     |      Convert a for loop with an if statement into a list comprehension that returns an expr or returns an if_expr if
     |      there is an if-else statement
     |      :param for_loop: for loop ast node
     |      :param if_block: if node within for loop, can be nested node within multiple if statements
     |      :param tests: if if_block is nested, tests included all previous compare conditions from previous if statements
     |      :return: New node converting for loop to list comprehension, else None if some error
     |
     |  visit_FunctionDef(self, node: ast.FunctionDef)
     |      Using NodeVisitor, visit every function definition within ast tree, search for patterns of code to be replaced, and
     |      if found, replace that section of code with a list comprehension.
     |      :param node: FunctionDef node
     |      :return:
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from ast.NodeVisitor:
     |
     |  generic_visit(self, node)
     |      Called if no explicit visitor function exists for a node.
     |
     |  visit(self, node)
     |      Visit a node.
     |
     |  visit_Constant(self, node)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ast.NodeVisitor:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    ASTtoString(a)
        Convert ast tree back into string for code file
        :param a:
        :return:

    generate_attri_patterns()
        Create list of Conditions sequences for recognizing code patterns that can be replaced with local variables for class attribute calls
        :return:

    generate_join_patterns()
        Create list of Conditions sequences for recognizing code patterns that can be replaced with string joins
        :return:

    generate_list_comp_patterns()
        Create list of Conditions sequences for recognizing code patterns that can be replaced with list comprehensions
        :return:

    parseFile(filename, pattern)
        Parse through a given file to create ast tree, then send to optimize based on the given pattern type
        :param filename:
        :param pattern: pattern to be searched through this file, 1 for list comp, 2 for string joins, and 3 for attribute replacements
        :return: String of the input file after pattern replacement optimizations were applied

    rgetattr(obj, attr, *args)
        Helper function to get nested attributes of a given object, modeled after base getattr

    traverseReplace(a: ast.Module, pattern)
        Given an ast Tree of a entire file, perform tree traversal using NodeVistor classes and replacement code sections with
        optimized versions
        :param a: ast tree
        :param pattern: type of pattern to be searched, 1 for list comp, 2 for string joins, and 3 for attribute replacements
        :return: String representing optimized file

DATA
    PyCF_ALLOW_TOP_LEVEL_AWAIT = 8192
    PyCF_ONLY_AST = 1024
    PyCF_TYPE_COMMENTS = 4096

FILE
    s22-pyopt-4kinds\patternreplace\parser.py
-------------------------------------------------------------------
NAME
    optimize

FUNCTIONS
    main()
        Given a file to optimize, apply combinations of different patterns replacement using parser.py. Create output files
        named after the pattern that was applied to the file, along with one file where all pattern types were applied.

FILE
   s22-pyopt-4kinds\optimize.py
-------------------------------------------------------------------
NAME
    timeFiles

FUNCTIONS
    main()
        Given two files to compare, run them using the timit package n times, then report of the resulting average run time of
        each file, the time difference, and the time factor increase or decrease of file1_time/file2_time

FILE
    s22-pyopt-4kinds\timefiles.py